This project is a comprehensive ROS2-based robot arm control system for the Lynxmotion AL5A robot arm, implementing inverse kinematics, Jacobian-based velocity control, and trajectory planning for various manipulation tasks.

Please follow the following instructions to run the code
1) Copy all files to edubot/python_impl/src/controllers
2) Build in python_impl:
cd edubot/python_impl
colcon build

3) Open rviz:
ros2 launch edubot sim.launch.py

4) Source and run:
source install/setup.bash
ros2 run controllers Controller_4_1

5) Select trajectory to run
6) Sit back and enjoy!

###### System Architecture ######
controllers/
├── __init__.py                    # Package initialization
├── Controller_4_1.py              # Main controller implementation
├── example_traj.py                # Example trajectory generation
├── IK.py                          # Inverse kinematics module
├── IK_set_wrist_angle.py          # IK with fixed wrist angle
├── Jacobian.py                    # Basic Jacobian implementation
├── Jacobian_final.py              # Optimized Jacobian with joint limits
├── joint_verifier.py              # Tool for testing joint movements
├── trajectory_utils.py            # CSV file trajectory loading/execution
├── workspacedifferentapproach3d.py # Workspace visualization
└── trajectories/                  # CSV trajectory definitions
    ├── berry_pick_place.csv       # Berry handling trajectory
    ├── pick_a_place_b.csv         # Pick and place sequence A→B
    ├── pick_b_place_a.csv         # Pick and place sequence B→A
    ├── spill_wipe.csv             # Spill cleaning pattern
    └── sponge_return.csv          # Return sponge to original position

###### Code Description #######
Key Components
Trajectory Files (CSV): Define waypoints for complex motions with columns for time, x, y, z coordinates, and gripper position.

Controller Script (Controller_4_1.py): Main executable with task implementations:

Circle trajectory drawing
Pick and place operations
Gentle handling of delicate objects
Complex wiping motions
Jacobian-based velocity control
Supporting Modules:

IK.py: Converts cartesian coordinates to joint angles
trajectory_utils.py: Loads and executes trajectories from CSV files
Jacobian_final.py: Implements velocity-based control with joint limit handling

Implemented Tasks
Circle Trajectory
Draws circular patterns in 3D space with configurable center and radius:
controller.execute_circle_trajectory(center_x=0, center_y=180, center_z=150, radius=80)

Pick and Place Sequence
Transfers objects between two locations with coordinated arm and gripper movements:
controller.pick_and_place_sequence()

Berry Pick and Place
Demonstrates gentle handling of delicate objects with careful gripper control:
controller.berry_pick_and_place()

Wipe Spill Sequence
Performs a complex cleaning operation with zig-zag and spiral patterns:
controller.wipe_spill_sequence()

Jacobian Velocity Control
Moves the end-effector with specified velocity using the Jacobian matrix:

controller.Jacobian_velocity_traj(initial_angles_deg=[60, -30, -30, 0], v_desired=[0, -10, 0])

Creating Custom Trajectories
You can create custom trajectories as CSV files with the following format:
time,x,y,z,gripper
0.0,0,150,150,0.0
1.0,10,160,160,0.0
...
Each line represents a waypoint with:

time: Timestamp in seconds
x,y,z: Target position in mm
gripper: Gripper position (0.0=open to 1.0=closed)
Lines starting with # or  are treated as comments.


##### Development and Testing ######
Joint Verification
Test individual joint movements using the joint_verifier tool:
ros2 run controllers joint_verifier


Workspace Visualization
Use the workspacedifferentapproach3d.py script to visualize the robot's workspace and test forward kinematics.


Implementation Notes
The inverse kinematics solver handles configurations with both "elbow up" and "elbow down" solutions
The Jacobian implementation includes singularity detection and joint limit enforcement
The trajectory executor provides interpolation between waypoints for smooth motion
The controller includes special handling for delicate objects with gradual gripper control
Troubleshooting
If a position is unreachable, the controller will report "Position out of reach" and attempt to continue with the next waypoint
Near singularities, the Jacobian controller will report high condition numbers
If joint limits are reached, the controller will report which joint hit its limit

